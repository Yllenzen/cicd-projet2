name: CI/CD Workflow

on: push
env:
  SERVER_PRODUCTION_IP: "92.222.36.28"
  #   SERVER_STAGING_IP: ""
  SERVER_PRODUCTION_USER: "root"

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Installation node.js
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      - name: Installation dependencies
        run: npm ci --prefer-offline

      - name: Démarrer le linter
        run: npm run lint

      - name: Audit
        run: npm audit fix --force --audit-level=moderate

  test-node-api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Installation node.js
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: ./node-api/package-lock.json

      - name: Installation dependencies
        run: npm ci --prefer-offline

      - name: Démarrer le linter
        run: npm run lint

      - name: Audit
        run: npm audit fix --force --audit-level=moderate

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: [test-frontend, test-node-api]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - context_name: ./frontend
            image_name: ghcr.io/yllenzen/cicd-projet2/frontend:latest
          - context_name: ./node-api
            image_name: ghcr.io/yllenzen/cicd-projet2/node-api:latest

    permissions:
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image_name }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context_name }}
          push: true
          tags: ${{ matrix.image_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lancement des tests e2e
        run: docker compose up --exit-code-from cypress --abort-on-container-exit
      - name: Clean
        run: docker compose down -v --remove-orphans

  # deploy-staging:
  #   needs: [e2e]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'

  #   environment:
  #     name: staging
  #     url: http://${{ env.SERVER_STAGING_IP}}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Déployer sur le serveur de staging
  #       uses: ./.github/actions/deploy
  #       with:
  #         vps_key: ${{ secrets.VPS_KEY}}
  #         server_ip: ${{ env.SERVER_STAGING_IP}}
  #         token_github: ${{ secrets.GITHUB_TOKEN}}

  deploy-production:
    needs: [e2e]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: http://${{ env.SERVER_PRODUCTION_IP}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Déployer sur le serveur de production
        uses: ./.github/actions/deploy
        with:
          vps_key: ${{ secrets.VPS_KEY}}
          server_ip: ${{ env.SERVER_PRODUCTION_IP}}
          token_github: ${{ secrets.GITHUB_TOKEN}}
